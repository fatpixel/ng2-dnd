{
  "version": 3,
  "file": "ng2-dnd.umd.js",
  "sources": [
    "ng://ng2-dnd/src/dnd.module.ts",
    "ng://ng2-dnd/src/droppable.component.ts",
    "ng://ng2-dnd/src/draggable.component.ts",
    "ng://ng2-dnd/src/dnd.service.ts",
    "ng://ng2-dnd/src/sortable.component.ts",
    "ng://ng2-dnd/src/abstract.component.ts",
    "ng://ng2-dnd/src/dnd.config.ts",
    "ng://ng2-dnd/src/dnd.utils.ts"
  ],
  "sourcesContent": [
    "// Copyright (C) 2016-2018 Sergey Akopkokhyants\n// This project is licensed under the terms of the MIT license.\n// https://github.com/akserg/ng2-dnd\n\nimport { NgModule, ModuleWithProviders } from \"@angular/core\";\n\nimport {DragDropConfig} from './dnd.config';\nimport {DragDropService, DragDropSortableService, dragDropServiceFactory, dragDropSortableServiceFactory} from './dnd.service';\nimport {DraggableComponent, DraggableHandleComponent} from './draggable.component';\nimport {DroppableComponent} from './droppable.component';\nimport {SortableContainer, SortableComponent, SortableHandleComponent} from './sortable.component';\n\nexport * from './abstract.component';\nexport * from './dnd.config';\nexport * from './dnd.service';\nexport * from './draggable.component';\nexport * from './droppable.component';\nexport * from './sortable.component';\n\nexport let providers = [\n    DragDropConfig,\n    { provide: DragDropService, useFactory: dragDropServiceFactory },\n    { provide: DragDropSortableService, useFactory: dragDropSortableServiceFactory, deps: [DragDropConfig] }\n];\n\n@NgModule({\n  declarations: [DraggableComponent, DraggableHandleComponent, DroppableComponent, SortableContainer, SortableComponent, SortableHandleComponent],\n  exports : [DraggableComponent, DraggableHandleComponent, DroppableComponent, SortableContainer, SortableComponent, SortableHandleComponent],\n\n})\nexport class DndModule {\n  static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: DndModule,\n            providers: providers\n        };\n    }\n}\n",
    "// Copyright (C) 2016-2018 Sergey Akopkokhyants\n// This project is licensed under the terms of the MIT license.\n// https://github.com/akserg/ng2-dnd\n\nimport {ChangeDetectorRef} from '@angular/core';\nimport {Directive, Input, Output, EventEmitter, ElementRef} from '@angular/core';\n\nimport {AbstractComponent} from './abstract.component';\nimport {DragDropConfig} from './dnd.config';\nimport {DragDropService, DragDropData} from './dnd.service';\n\n@Directive({ selector: '[dnd-droppable]' })\nexport class DroppableComponent extends AbstractComponent {\n\n    @Input(\"dropEnabled\") set droppable(value:boolean) {\n        this.dropEnabled = !!value;\n    }\n\n    /**\n     * Callback function called when the drop action completes correctly.\n     * It is activated before the on-drag-success callback.\n     */\n    @Output() onDropSuccess: EventEmitter<DragDropData> = new EventEmitter<DragDropData>();\n    @Output() onDragEnter: EventEmitter<DragDropData> = new EventEmitter<DragDropData>();\n    @Output() onDragOver: EventEmitter<DragDropData> = new EventEmitter<DragDropData>();\n    @Output() onDragLeave: EventEmitter<DragDropData> = new EventEmitter<DragDropData>();\n\n    @Input(\"allowDrop\") set allowdrop(value: (dropData: any) => boolean) {\n        this.allowDrop = value;\n    }\n\n    @Input(\"dropZones\") set dropzones(value:Array<string>) {\n        this.dropZones = value;\n    }\n\n    /**\n     * Drag allowed effect\n     */\n    @Input(\"effectAllowed\") set effectallowed(value: string) {\n        this.effectAllowed = value;\n    }\n\n    /**\n     * Drag effect cursor\n     */\n    @Input(\"effectCursor\") set effectcursor(value: string) {\n        this.effectCursor = value;\n    }\n\n    constructor(elemRef: ElementRef, dragDropService: DragDropService, config:DragDropConfig,\n        cdr:ChangeDetectorRef) {\n\n        super(elemRef, dragDropService, config, cdr);\n\n        this.dropEnabled = true;\n    }\n\n    _onDragEnterCallback(event: MouseEvent) {\n        if (this._dragDropService.isDragged) {\n            this._elem.classList.add(this._config.onDragEnterClass);\n            this.onDragEnter.emit({dragData: this._dragDropService.dragData, mouseEvent: event});\n        }\n    }\n\n    _onDragOverCallback (event: MouseEvent) {\n        if (this._dragDropService.isDragged) {\n            this._elem.classList.add(this._config.onDragOverClass);\n            this.onDragOver.emit({dragData: this._dragDropService.dragData, mouseEvent: event});\n        }\n    };\n\n    _onDragLeaveCallback (event: MouseEvent) {\n        if (this._dragDropService.isDragged) {\n            this._elem.classList.remove(this._config.onDragOverClass);\n            this._elem.classList.remove(this._config.onDragEnterClass);\n            this.onDragLeave.emit({dragData: this._dragDropService.dragData, mouseEvent: event});\n        }\n    };\n\n    _onDropCallback (event: MouseEvent) {\n        let dataTransfer = (event as any).dataTransfer;\n        if (this._dragDropService.isDragged || (dataTransfer && dataTransfer.files)) {\n            this.onDropSuccess.emit({dragData: this._dragDropService.dragData, mouseEvent: event});\n            if (this._dragDropService.onDragSuccessCallback) {\n                this._dragDropService.onDragSuccessCallback.emit({dragData: this._dragDropService.dragData, mouseEvent: event});\n            }\n            this._elem.classList.remove(this._config.onDragOverClass);\n            this._elem.classList.remove(this._config.onDragEnterClass);\n        }\n    }\n}\n",
    "// Copyright (C) 2016-2018 Sergey Akopkokhyants\n// This project is licensed under the terms of the MIT license.\n// https://github.com/akserg/ng2-dnd\n\nimport {ChangeDetectorRef} from '@angular/core';\nimport {Directive, Input, Output, EventEmitter, ElementRef} from '@angular/core';\n\nimport {AbstractComponent, AbstractHandleComponent} from './abstract.component';\nimport {DragDropConfig, DragImage} from './dnd.config';\nimport {DragDropService, DragDropData} from './dnd.service';\n\n@Directive({ selector: '[dnd-draggable]' })\nexport class DraggableComponent extends AbstractComponent {\n\n    @Input(\"dragEnabled\") set draggable(value:boolean) {\n        this.dragEnabled = !!value;\n    }\n\n    /**\n     * Callback function called when the drag actions happened.\n     */\n    @Output() onDragStart: EventEmitter<DragDropData> = new EventEmitter<DragDropData>();\n    @Output() onDragEnd: EventEmitter<DragDropData> = new EventEmitter<DragDropData>();\n\n    /**\n     * The data that has to be dragged. It can be any JS object\n     */\n    @Input() dragData: any;\n\n    /**\n     * Callback function called when the drag action ends with a valid drop action.\n     * It is activated after the on-drop-success callback\n     */\n    @Output(\"onDragSuccess\") onDragSuccessCallback: EventEmitter<any> = new EventEmitter<any>();\n\n    @Input(\"dropZones\") set dropzones(value:Array<string>) {\n        this.dropZones = value;\n    }\n\n    /**\n     * Drag allowed effect\n     */\n    @Input(\"effectAllowed\") set effectallowed(value: string) {\n        this.effectAllowed = value;\n    }\n\n    /**\n     * Drag effect cursor\n     */\n    @Input(\"effectCursor\") set effectcursor(value: string) {\n        this.effectCursor = value;\n    }\n\n    /**\n     * Here is the property dragImage you can use:\n     * - The string value as url to the image\n     *   <div class=\"panel panel-default\"\n     *        dnd-draggable [dragEnabled]=\"true\"\n     *        [dragImage]=\"/images/simpler.png\">\n     * ...\n     * - The DragImage value with Image and offset by x and y:\n     *   let myDragImage: DragImage = new DragImage(\"/images/simpler1.png\", 0, 0);\n     * ...\n     *   <div class=\"panel panel-default\"\n     *        dnd-draggable [dragEnabled]=\"true\"\n     *        [dragImage]=\"myDragImage\">\n     * ...\n     * - The custom function to return the value of dragImage programmatically:\n     *   <div class=\"panel panel-default\"\n     *        dnd-draggable [dragEnabled]=\"true\"\n     *        [dragImage]=\"getDragImage(someData)\">\n     * ...\n     *   getDragImage(value:any): string {\n     *     return value ? \"/images/simpler1.png\" : \"/images/simpler2.png\"\n     *   }\n     */\n    @Input() dragImage: string | DragImage | Function;\n\n    \n    @Input() cloneItem: boolean;\n\n    constructor(elemRef: ElementRef, dragDropService: DragDropService, config:DragDropConfig,\n        cdr:ChangeDetectorRef) {\n\n        super(elemRef, dragDropService, config, cdr);\n        this._defaultCursor = this._elem.style.cursor;\n        this.dragEnabled = true;\n    }\n\n    _onDragStartCallback(event: MouseEvent) {\n        this._dragDropService.isDragged = true;\n        this._dragDropService.dragData = this.dragData;\n        this._dragDropService.onDragSuccessCallback = this.onDragSuccessCallback;\n        this._elem.classList.add(this._config.onDragStartClass);\n        //\n        this.onDragStart.emit({dragData: this.dragData, mouseEvent: event});\n    }\n\n    _onDragEndCallback(event: MouseEvent) {\n        this._dragDropService.isDragged = false;\n        this._dragDropService.dragData = null;\n        this._dragDropService.onDragSuccessCallback = null;\n        this._elem.classList.remove(this._config.onDragStartClass);\n        //\n        this.onDragEnd.emit({dragData: this.dragData, mouseEvent: event});\n    }\n}\n\n\n@Directive({ selector: '[dnd-draggable-handle]' })\nexport class DraggableHandleComponent extends AbstractHandleComponent {\n    constructor(elemRef: ElementRef, dragDropService: DragDropService, config:DragDropConfig, _Component: DraggableComponent,\n        cdr:ChangeDetectorRef) {\n\n        super(elemRef, dragDropService, config, _Component, cdr);\n    }\n}\n",
    "// Copyright (C) 2016-2018 Sergey Akopkokhyants\n// This project is licensed under the terms of the MIT license.\n// https://github.com/akserg/ng2-dnd\n\nimport {Injectable, EventEmitter} from '@angular/core';\n\nimport {DragDropConfig} from './dnd.config';\nimport {isPresent} from './dnd.utils';\nimport {SortableContainer} from './sortable.component';\n\nexport class DragDropData {\n    dragData: any;\n    mouseEvent: MouseEvent;\n}\n\nexport function dragDropServiceFactory(): DragDropService  {\n    return new DragDropService();\n}\n\n@Injectable()\nexport class DragDropService {\n    allowedDropZones: Array<string> = [];\n    onDragSuccessCallback: EventEmitter<DragDropData>;\n    dragData: any;\n    firstDragData: any;\n    isDragged: boolean;\n}\n\nexport function dragDropSortableServiceFactory(config: DragDropConfig): DragDropSortableService  {\n    return new DragDropSortableService(config);\n}\n\n@Injectable()\nexport class DragDropSortableService {\n    index: number;\n    sortableContainer: SortableContainer;\n    isDragged: boolean;\n\n    private _elem: HTMLElement;\n    public get elem(): HTMLElement {\n        return this._elem;\n    }\n\n    constructor(private _config:DragDropConfig) {}\n\n    markSortable(elem: HTMLElement) {\n        if (isPresent(this._elem)) {\n            this._elem.classList.remove(this._config.onSortableDragClass);\n        }\n        if (isPresent(elem)) {\n            this._elem = elem;\n            this._elem.classList.add(this._config.onSortableDragClass);\n        }\n    }\n}\n",
    "// Copyright (C) 2016-2018 Sergey Akopkokhyants\n// This project is licensed under the terms of the MIT license.\n// https://github.com/akserg/ng2-dnd\n\nimport {ChangeDetectorRef} from '@angular/core';\nimport {Directive, Input, Output, EventEmitter, ElementRef} from '@angular/core';\nimport {FormArray} from '@angular/forms';\n\nimport {AbstractComponent, AbstractHandleComponent} from './abstract.component';\nimport {DragDropConfig} from './dnd.config';\nimport {DragDropService, DragDropSortableService} from './dnd.service';\n\n@Directive({ selector: '[dnd-sortable-container]' })\nexport class SortableContainer extends AbstractComponent {\n\n    @Input(\"dragEnabled\") set draggable(value:boolean) {\n        this.dragEnabled = !!value;\n    }\n\n    private _sortableData: Array<any>|FormArray = [];\n    private sortableHandler: SortableFormArrayHandler|SortableArrayHandler;\n\n    @Input() set sortableData(sortableData: Array<any>|FormArray) {\n        this._sortableData = sortableData;\n        if (sortableData instanceof FormArray) {\n            this.sortableHandler = new SortableFormArrayHandler();\n        } else {\n            this.sortableHandler = new SortableArrayHandler();\n        }\n        //\n        this.dropEnabled = !!this._sortableData;\n        // console.log(\"collection is changed, drop enabled: \" + this.dropEnabled);\n    }\n    get sortableData(): Array<any>|FormArray {\n        return this._sortableData;\n    }\n\n    @Input(\"dropZones\") set dropzones(value:Array<string>) {\n        this.dropZones = value;\n    }\n\n    constructor(elemRef: ElementRef, dragDropService: DragDropService, config:DragDropConfig, cdr:ChangeDetectorRef,\n        private _sortableDataService: DragDropSortableService) {\n\n        super(elemRef, dragDropService, config, cdr);\n        this.dragEnabled = false;\n    }\n\n    _onDragEnterCallback(event: Event) {\n        if (this._sortableDataService.isDragged) {\n            let item:any = this._sortableDataService.sortableContainer.getItemAt(this._sortableDataService.index);\n            // Check does element exist in sortableData of this Container\n            if (this.indexOf(item) === -1) {\n                // Let's add it\n                // console.log('Container._onDragEnterCallback. drag node [' + this._sortableDataService.index.toString() + '] over parent node');\n                // Remove item from previouse list\n                this._sortableDataService.sortableContainer.removeItemAt(this._sortableDataService.index);\n                if (this._sortableDataService.sortableContainer._sortableData.length === 0) {\n                    this._sortableDataService.sortableContainer.dropEnabled = true;\n                }\n                // Add item to new list\n                this.insertItemAt(item, 0);\n                this._sortableDataService.sortableContainer = this;\n                this._sortableDataService.index = 0;\n            }\n            // Refresh changes in properties of container component\n            this.detectChanges();\n        }\n    }\n\n    getItemAt(index: number): any {\n        return this.sortableHandler.getItemAt(this._sortableData, index);\n    }\n\n    indexOf(item: any): number {\n        return this.sortableHandler.indexOf(this._sortableData, item);\n    }\n\n    removeItemAt(index: number): void {\n        this.sortableHandler.removeItemAt(this._sortableData, index);\n    }\n\n    insertItemAt(item: any, index: number) {\n        this.sortableHandler.insertItemAt(this._sortableData, item, index);\n    }\n}\n\nclass SortableArrayHandler {\n    getItemAt(sortableData: any, index: number): any {\n        return sortableData[index];\n    }\n\n    indexOf(sortableData: any, item: any): number {\n        return sortableData.indexOf(item);\n    }\n\n    removeItemAt(sortableData: any, index: number) {\n        sortableData.splice(index, 1);\n    }\n\n    insertItemAt(sortableData: any, item: any, index: number) {\n        sortableData.splice(index, 0, item);\n    }\n}\n\nclass SortableFormArrayHandler {\n    getItemAt(sortableData: any, index: number): any {\n        return sortableData.at(index);\n    }\n\n    indexOf(sortableData: any, item: any): number {\n        return sortableData.controls.indexOf(item);\n    }\n\n    removeItemAt(sortableData: any, index: number) {\n        sortableData.removeAt(index);\n    }\n\n    insertItemAt(sortableData: any, item: any, index: number) {\n        sortableData.insert(index, item);\n    }\n}\n\n@Directive({ selector: '[dnd-sortable]' })\nexport class SortableComponent extends AbstractComponent {\n\n    @Input('sortableIndex') index: number;\n\n    @Input(\"dragEnabled\") set draggable(value:boolean) {\n        this.dragEnabled = !!value;\n    }\n\n    @Input(\"dropEnabled\") set droppable(value:boolean) {\n        this.dropEnabled = !!value;\n    }\n\n    /**\n     * The data that has to be dragged. It can be any JS object\n     */\n    @Input() dragData: any;\n\n    /**\n     * Drag allowed effect\n     */\n    @Input(\"effectAllowed\") set effectallowed(value: string) {\n        this.effectAllowed = value;\n    }\n\n    /**\n     * Drag effect cursor\n     */\n    @Input(\"effectCursor\") set effectcursor(value: string) {\n        this.effectCursor = value;\n    }\n\n    /**\n     * Callback function called when the drag action ends with a valid drop action.\n     * It is activated after the on-drop-success callback\n     */\n    @Output(\"onDragSuccess\") onDragSuccessCallback: EventEmitter<any> = new EventEmitter<any>();\n\n    @Output(\"onDragStart\") onDragStartCallback: EventEmitter<any> = new EventEmitter<any>();\n    @Output(\"onDragOver\") onDragOverCallback: EventEmitter<any> = new EventEmitter<any>();\n    @Output(\"onDragEnd\") onDragEndCallback: EventEmitter<any> = new EventEmitter<any>();\n    @Output(\"onDropSuccess\") onDropSuccessCallback: EventEmitter<any> = new EventEmitter<any>();\n\n    constructor(elemRef: ElementRef, dragDropService: DragDropService, config:DragDropConfig,\n        private _sortableContainer: SortableContainer,\n        private _sortableDataService: DragDropSortableService,\n        cdr:ChangeDetectorRef) {\n        super(elemRef, dragDropService, config, cdr);\n        this.dropZones = this._sortableContainer.dropZones;\n        this.dragEnabled = true;\n        this.dropEnabled = true;\n    }\n\n    _onDragStartCallback(event: Event) {\n        // console.log('_onDragStartCallback. dragging elem with index ' + this.index);\n        this._sortableDataService.isDragged = true;\n        this._sortableDataService.sortableContainer = this._sortableContainer;\n        this._sortableDataService.index = this.index;\n        this._sortableDataService.markSortable(this._elem);\n        // Add dragData\n        this._dragDropService.isDragged = true;\n        this._dragDropService.dragData = this.dragData;\n        this._dragDropService.onDragSuccessCallback = this.onDragSuccessCallback;\n        //\n        this.onDragStartCallback.emit(this._dragDropService.dragData);\n    }\n\n    _onDragOverCallback(event: Event) {\n        if (this._sortableDataService.isDragged && this._elem !== this._sortableDataService.elem) {\n            // console.log('_onDragOverCallback. dragging elem with index ' + this.index);\n            this._sortableDataService.sortableContainer = this._sortableContainer;\n            this._sortableDataService.index = this.index;\n            this._sortableDataService.markSortable(this._elem);\n            this.onDragOverCallback.emit(this._dragDropService.dragData);\n        }\n    }\n\n    _onDragEndCallback(event: Event) {\n        // console.log('_onDragEndCallback. end dragging elem with index ' + this.index);\n        this._sortableDataService.isDragged = false;\n        this._sortableDataService.sortableContainer = null;\n        this._sortableDataService.index = null;\n        this._sortableDataService.markSortable(null);\n        // Add dragGata\n        this._dragDropService.isDragged = false;\n        this._dragDropService.dragData = null;\n        this._dragDropService.onDragSuccessCallback = null;\n        //\n        this.onDragEndCallback.emit(this._dragDropService.dragData);\n    }\n\n    _onDragEnterCallback(event: Event) {\n        if (this._sortableDataService.isDragged) {\n            this._sortableDataService.markSortable(this._elem);\n            if ((this.index !== this._sortableDataService.index) ||\n                (this._sortableDataService.sortableContainer.sortableData !== this._sortableContainer.sortableData)) {\n                // console.log('Component._onDragEnterCallback. drag node [' + this.index + '] over node [' + this._sortableDataService.index + ']');\n                // Get item\n                let item:any = this._sortableDataService.sortableContainer.getItemAt(this._sortableDataService.index);\n                // Remove item from previouse list\n                this._sortableDataService.sortableContainer.removeItemAt(this._sortableDataService.index);\n                if (this._sortableDataService.sortableContainer.sortableData.length === 0) {\n                    this._sortableDataService.sortableContainer.dropEnabled = true;\n                }\n                // Add item to new list\n                this._sortableContainer.insertItemAt(item, this.index);\n                if (this._sortableContainer.dropEnabled) {\n                    this._sortableContainer.dropEnabled = false;\n                }\n                this._sortableDataService.sortableContainer = this._sortableContainer;\n                this._sortableDataService.index = this.index;\n                this.detectChanges();\n            }\n        }\n    }\n\n    _onDropCallback (event: Event) {\n        if (this._sortableDataService.isDragged) {\n            // console.log('onDropCallback.onDropSuccessCallback.dragData', this._dragDropService.dragData);\n            this.onDropSuccessCallback.emit(this._dragDropService.dragData);\n            if (this._dragDropService.onDragSuccessCallback) {\n                // console.log('onDropCallback.onDragSuccessCallback.dragData', this._dragDropService.dragData);\n                this._dragDropService.onDragSuccessCallback.emit(this._dragDropService.dragData);\n            }\n            // Refresh changes in properties of container component\n            this._sortableContainer.detectChanges();\n        }\n    }\n}\n\n@Directive({ selector: '[dnd-sortable-handle]' })\nexport class SortableHandleComponent extends AbstractHandleComponent {\n    constructor(elemRef: ElementRef, dragDropService: DragDropService, config:DragDropConfig, _Component: SortableComponent,\n        cdr:ChangeDetectorRef) {\n\n        super(elemRef, dragDropService, config, _Component, cdr);\n    }\n}\n",
    "// Copyright (C) 2016-2018 Sergey Akopkokhyants\n// This project is licensed under the terms of the MIT license.\n// https://github.com/akserg/ng2-dnd\n\nimport {Injectable, ChangeDetectorRef, ViewRef} from '@angular/core';\nimport {ElementRef} from '@angular/core';\n\nimport { DragDropConfig, DragImage } from './dnd.config';\nimport { DragDropService } from './dnd.service';\nimport { isString, isFunction, isPresent, createImage, callFun } from './dnd.utils';\n\n@Injectable()\nexport abstract class AbstractComponent {\n    _elem: HTMLElement;\n    _dragHandle: HTMLElement;\n    _dragHelper: HTMLElement;\n    _defaultCursor: string;\n\n    /**\n     * Last element that was mousedown'ed\n     */\n    _target: EventTarget;\n\n    /**\n     * Whether the object is draggable. Default is true.\n     */\n    private _dragEnabled: boolean = false;\n    set dragEnabled(enabled: boolean) {\n        this._dragEnabled = !!enabled;\n        this._elem.draggable = this._dragEnabled;\n    }\n    get dragEnabled(): boolean {\n        return this._dragEnabled;\n    }\n\n    /**\n     * Allows drop on this element\n     */\n    dropEnabled: boolean = false;\n    /**\n     * Drag effect\n     */\n    effectAllowed: string;\n    /**\n     * Drag cursor\n     */\n    effectCursor: string;\n\n    /**\n     * Restrict places where a draggable element can be dropped. Either one of\n     * these two mechanisms can be used:\n     *\n     * - dropZones: an array of strings that permits to specify the drop zones\n     *   associated with this component. By default, if the drop-zones attribute\n     *   is not specified, the droppable component accepts drop operations by\n     *   all the draggable components that do not specify the allowed-drop-zones\n     *\n     * - allowDrop: a boolean function for droppable components, that is checked\n     *   when an item is dragged. The function is passed the dragData of this\n     *   item.\n     *   - if it returns true, the item can be dropped in this component\n     *   - if it returns false, the item cannot be dropped here\n     */\n    allowDrop: (dropData: any) => boolean;\n    dropZones: string[] = [];\n\n    /**\n     * Here is the property dragImage you can use:\n     * - The string value as url to the image\n     *   <div class=\"panel panel-default\"\n     *        dnd-draggable [dragEnabled]=\"true\"\n     *        [dragImage]=\"/images/simpler.png\">\n     * ...\n     * - The DragImage value with Image and optional offset by x and y:\n     *   let myDragImage: DragImage = new DragImage(\"/images/simpler1.png\", 0, 0);\n     * ...\n     *   <div class=\"panel panel-default\"\n     *        dnd-draggable [dragEnabled]=\"true\"\n     *        [dragImage]=\"myDragImage\">\n     * ...\n     * - The custom function to return the value of dragImage programmatically:\n     *   <div class=\"panel panel-default\"\n     *        dnd-draggable [dragEnabled]=\"true\"\n     *        [dragImage]=\"getDragImage(someData)\">\n     * ...\n     *   getDragImage(value:any): string {\n     *     return value ? \"/images/simpler1.png\" : \"/images/simpler2.png\"\n     *   }\n     */\n    dragImage: string | DragImage | Function;\n\n    cloneItem: boolean = false;\n\n    constructor(elemRef: ElementRef, public _dragDropService: DragDropService, public _config: DragDropConfig,\n        private _cdr: ChangeDetectorRef) {\n\n        // Assign default cursor unless overridden\n        this._defaultCursor = _config.defaultCursor;\n        this._elem = elemRef.nativeElement;\n        this._elem.style.cursor = this._defaultCursor;  // set default cursor on our element\n        //\n        // DROP events\n        //\n        this._elem.ondragenter = (event: Event) => {\n            this._onDragEnter(event);\n        };\n        this._elem.ondragover = (event: DragEvent) => {\n            this._onDragOver(event);\n            //\n            if (event.dataTransfer != null) {\n                event.dataTransfer.dropEffect = this._config.dropEffect.name;\n            }\n\n            return false;\n        };\n        this._elem.ondragleave = (event: Event) => {\n            this._onDragLeave(event);\n        };\n        this._elem.ondrop = (event: Event) => {\n            this._onDrop(event);\n        };\n        //\n        // Drag events\n        //\n      this._elem.addEventListener('mousedown', (event: MouseEvent) => {\n        this._target = event.target;\n      }, false);\n\n        this._elem.addEventListener('dragstart', (event: DragEvent) => {\n            if (this._dragHandle) {\n                if (!this._dragHandle.contains(<Element>this._target)) {\n                    event.preventDefault();\n                    return;\n                }\n            }\n            if (this._dragDropService.firstDragData) { // process only first element in hierarhy\n              return ;\n            }\n            this._onDragStart(event);\n            this._dragDropService.firstDragData = this._dragDropService.dragData;\n            //\n            if (event.dataTransfer != null) {\n                event.dataTransfer.setData('text', '');\n                // Change drag effect\n                event.dataTransfer.effectAllowed = this.effectAllowed || this._config.dragEffect.name;\n                // Change drag image\n                if (isPresent(this.dragImage)) {\n                    if (isString(this.dragImage)) {\n                        (<any>event.dataTransfer).setDragImage(createImage(<string>this.dragImage));\n                    } else if (isFunction(this.dragImage)) {\n                        (<any>event.dataTransfer).setDragImage(callFun(<Function>this.dragImage));\n                    } else {\n                        let img: DragImage = <DragImage>this.dragImage;\n                        (<any>event.dataTransfer).setDragImage(img.imageElement, img.x_offset, img.y_offset);\n                    }\n                } else if (isPresent(this._config.dragImage)) {\n                    let dragImage: DragImage = this._config.dragImage;\n                    (<any>event.dataTransfer).setDragImage(dragImage.imageElement, dragImage.x_offset, dragImage.y_offset);\n                } else if (this.cloneItem) {\n                    this._dragHelper = <HTMLElement>this._elem.cloneNode(true);\n                    this._dragHelper.classList.add('dnd-drag-item');\n                    this._dragHelper.style.position = \"absolute\";\n                    this._dragHelper.style.top = \"0px\";\n                    this._dragHelper.style.left = \"-1000px\";\n                    this._elem.parentElement.appendChild(this._dragHelper);\n                    (<any>event.dataTransfer).setDragImage(this._dragHelper, event.offsetX, event.offsetY);\n                }\n\n                // Change drag cursor\n                let cursorelem = (this._dragHandle) ? this._dragHandle : this._elem;\n\n                if (this._dragEnabled) {\n                    cursorelem.style.cursor = this.effectCursor ? this.effectCursor : this._config.dragCursor;\n                } else {\n                    cursorelem.style.cursor = this._defaultCursor;\n                }\n            }\n        });\n\n        this._elem.addEventListener('dragend', (event: Event) => {\n            if (this._elem.parentElement && this._dragHelper) {\n                this._elem.parentElement.removeChild(this._dragHelper);\n            }\n            this._onDragEnd(event);\n            // Restore style of dragged element\n            let cursorelem = (this._dragHandle) ? this._dragHandle : this._elem;\n            cursorelem.style.cursor = this._defaultCursor;\n            this._dragDropService.firstDragData = null;\n        });\n    }\n\n    public setDragHandle(elem: HTMLElement) {\n        this._dragHandle = elem;\n    }\n    /******* Change detection ******/\n\n    detectChanges () {\n        // Programmatically run change detection to fix issue in Safari\n        setTimeout(() => {\n            if ( this._cdr && !(this._cdr as ViewRef).destroyed ) {\n                this._cdr.detectChanges();\n            }\n        }, 250);\n    }\n\n    //****** Droppable *******//\n    private _onDragEnter(event: Event): void {\n        // console.log('ondragenter._isDropAllowed', this._isDropAllowed);\n        if (this._isDropAllowed(event)) {\n            // event.preventDefault();\n            this._onDragEnterCallback(event);\n        }\n    }\n\n    private _onDragOver(event: Event) {\n        // // console.log('ondragover._isDropAllowed', this._isDropAllowed);\n        if (this._isDropAllowed(event)) {\n            // The element is over the same source element - do nothing\n            if (event.preventDefault) {\n                // Necessary. Allows us to drop.\n                event.preventDefault();\n            }\n\n            this._onDragOverCallback(event);\n        }\n    }\n\n    private _onDragLeave(event: Event): void {\n        // console.log('ondragleave._isDropAllowed', this._isDropAllowed);\n        if (this._isDropAllowed(event)) {\n            // event.preventDefault();\n            this._onDragLeaveCallback(event);\n        }\n    }\n\n    private _onDrop(event: Event): void {\n        // console.log('ondrop._isDropAllowed', this._isDropAllowed);\n        if (this._isDropAllowed(event)) {\n            // Necessary. Allows us to drop.\n            this._preventAndStop(event);\n\n            this._onDropCallback(event);\n\n            this.detectChanges();\n        }\n    }\n\n    private _isDropAllowed(event: any): boolean {\n        if ((this._dragDropService.isDragged || (event.dataTransfer && event.dataTransfer.files)) && this.dropEnabled) {\n            // First, if `allowDrop` is set, call it to determine whether the\n            // dragged element can be dropped here.\n            if (this.allowDrop) {\n                return this.allowDrop(this._dragDropService.dragData);\n            }\n\n            // Otherwise, use dropZones if they are set.\n            if (this.dropZones.length === 0 && this._dragDropService.allowedDropZones.length === 0) {\n                return true;\n            }\n            for (let i: number = 0; i < this._dragDropService.allowedDropZones.length; i++) {\n                let dragZone: string = this._dragDropService.allowedDropZones[i];\n                if (this.dropZones.indexOf(dragZone) !== -1) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    private _preventAndStop(event: Event): any {\n        if (event.preventDefault) {\n            event.preventDefault();\n        }\n        if (event.stopPropagation) {\n            event.stopPropagation();\n        }\n    }\n\n    //*********** Draggable **********//\n\n    private _onDragStart(event: Event): void {\n        //console.log('ondragstart.dragEnabled', this._dragEnabled);\n        if (this._dragEnabled) {\n            this._dragDropService.allowedDropZones = this.dropZones;\n            // console.log('ondragstart.allowedDropZones', this._dragDropService.allowedDropZones);\n            this._onDragStartCallback(event);\n            if (event.stopPropagation) {\n                event.stopPropagation();\n            }\n        }\n    }\n\n    private _onDragEnd(event: Event): void {\n        this._dragDropService.allowedDropZones = [];\n        // console.log('ondragend.allowedDropZones', this._dragDropService.allowedDropZones);\n        this._onDragEndCallback(event);\n    }\n\n    //**** Drop Callbacks ****//\n    _onDragEnterCallback(event: Event) { }\n    _onDragOverCallback(event: Event) { }\n    _onDragLeaveCallback(event: Event) { }\n    _onDropCallback(event: Event) { }\n\n    //**** Drag Callbacks ****//\n    _onDragStartCallback(event: Event) { }\n    _onDragEndCallback(event: Event) { }\n}\n\nexport class AbstractHandleComponent {\n    _elem: HTMLElement;\n    constructor(elemRef: ElementRef, public _dragDropService: DragDropService, public _config: DragDropConfig,\n        private _Component: AbstractComponent, private _cdr: ChangeDetectorRef) {\n        this._elem = elemRef.nativeElement;\n        this._Component.setDragHandle(this._elem);\n    }\n}\n",
    "// Copyright (C) 2016-2018 Sergey Akopkokhyants\n// This project is licensed under the terms of the MIT license.\n// https://github.com/akserg/ng2-dnd\n\nimport {isString} from './dnd.utils';\n\nexport class DataTransferEffect {\n\n    static COPY = new DataTransferEffect('copy');\n    static LINK = new DataTransferEffect('link');\n    static MOVE = new DataTransferEffect('move');\n    static NONE = new DataTransferEffect('none');\n\n    constructor(public name: string) { }\n}\n\nexport class DragImage {\n    constructor(\n        public imageElement: any,\n        public x_offset: number = 0,\n        public y_offset: number = 0) {\n            if (isString(this.imageElement)) {\n                // Create real image from string source\n                let imgScr: string = <string>this.imageElement;\n                this.imageElement = new HTMLImageElement();\n                (<HTMLImageElement>this.imageElement).src = imgScr;\n            }\n        }\n}\n\nexport class DragDropConfig {\n    public onDragStartClass: string = \"dnd-drag-start\";\n    public onDragEnterClass: string = \"dnd-drag-enter\";\n    public onDragOverClass: string = \"dnd-drag-over\";\n    public onSortableDragClass: string = \"dnd-sortable-drag\";\n\n    public dragEffect: DataTransferEffect = DataTransferEffect.MOVE;\n    public dropEffect: DataTransferEffect = DataTransferEffect.MOVE;\n    public dragCursor: string = \"move\";\n    public dragImage: DragImage;\n    public defaultCursor: string = \"pointer\";\n}",
    "// Copyright (C) 2016-2018 Sergey Akopkokhyants\n// This project is licensed under the terms of the MIT license.\n// https://github.com/akserg/ng2-dnd\n\n/**\n * Check and return true if an object is type of string\n */\nexport function isString(obj:any) {\n    return typeof obj === \"string\";\n}\n\n/**\n * Check and return true if an object not undefined or null\n */\nexport function isPresent(obj: any) {\n    return obj !== undefined && obj !== null;\n}\n\n/**\n * Check and return true if an object is type of Function\n */\nexport function isFunction(obj: any) {\n    return typeof obj === \"function\";\n}\n\n/**\n * Create Image element with specified url string\n */\nexport function createImage(src: string) {\n    let img:HTMLImageElement = new HTMLImageElement();\n    img.src = src;\n    return img;\n}\n\n/**\n * Call the function\n */\nexport function callFun(fun: Function) {\n    return fun();\n}"
  ],
  "names": [
    "EventEmitter",
    "ElementRef",
    "Directive",
    "Input",
    "Output",
    "Injectable"
  ],
  "mappings": "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"
}

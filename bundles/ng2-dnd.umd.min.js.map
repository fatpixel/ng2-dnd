{
  "version": 3,
  "file": "ng2-dnd.umd.min.js",
  "sources": [
    "ng://ng2-dnd/src/dnd.utils.ts",
    "ng://ng2-dnd/src/draggable.component.ts",
    "ng://ng2-dnd/src/dnd.config.ts",
    "ng://ng2-dnd/src/abstract.component.ts",
    "ng://ng2-dnd/src/sortable.component.ts",
    "ng://ng2-dnd/src/dnd.service.ts",
    "ng://ng2-dnd/src/droppable.component.ts",
    "ng://ng2-dnd/src/dnd.module.ts"
  ],
  "sourcesContent": [
    "// Copyright (C) 2016-2018 Sergey Akopkokhyants\n// This project is licensed under the terms of the MIT license.\n// https://github.com/akserg/ng2-dnd\n\n/**\n * Check and return true if an object is type of string\n */\nexport function isString(obj:any) {\n    return typeof obj === \"string\";\n}\n\n/**\n * Check and return true if an object not undefined or null\n */\nexport function isPresent(obj: any) {\n    return obj !== undefined && obj !== null;\n}\n\n/**\n * Check and return true if an object is type of Function\n */\nexport function isFunction(obj: any) {\n    return typeof obj === \"function\";\n}\n\n/**\n * Create Image element with specified url string\n */\nexport function createImage(src: string) {\n    let img:HTMLImageElement = new HTMLImageElement();\n    img.src = src;\n    return img;\n}\n\n/**\n * Call the function\n */\nexport function callFun(fun: Function) {\n    return fun();\n}",
    "// Copyright (C) 2016-2018 Sergey Akopkokhyants\n// This project is licensed under the terms of the MIT license.\n// https://github.com/akserg/ng2-dnd\n\nimport {ChangeDetectorRef} from '@angular/core';\nimport {Directive, Input, Output, EventEmitter, ElementRef} from '@angular/core';\n\nimport {AbstractComponent, AbstractHandleComponent} from './abstract.component';\nimport {DragDropConfig, DragImage} from './dnd.config';\nimport {DragDropService, DragDropData} from './dnd.service';\n\n@Directive({ selector: '[dnd-draggable]' })\nexport class DraggableComponent extends AbstractComponent {\n\n    @Input(\"dragEnabled\") set draggable(value:boolean) {\n        this.dragEnabled = !!value;\n    }\n\n    /**\n     * Callback function called when the drag actions happened.\n     */\n    @Output() onDragStart: EventEmitter<DragDropData> = new EventEmitter<DragDropData>();\n    @Output() onDragEnd: EventEmitter<DragDropData> = new EventEmitter<DragDropData>();\n\n    /**\n     * The data that has to be dragged. It can be any JS object\n     */\n    @Input() dragData: any;\n\n    /**\n     * Callback function called when the drag action ends with a valid drop action.\n     * It is activated after the on-drop-success callback\n     */\n    @Output(\"onDragSuccess\") onDragSuccessCallback: EventEmitter<any> = new EventEmitter<any>();\n\n    @Input(\"dropZones\") set dropzones(value:Array<string>) {\n        this.dropZones = value;\n    }\n\n    /**\n     * Drag allowed effect\n     */\n    @Input(\"effectAllowed\") set effectallowed(value: string) {\n        this.effectAllowed = value;\n    }\n\n    /**\n     * Drag effect cursor\n     */\n    @Input(\"effectCursor\") set effectcursor(value: string) {\n        this.effectCursor = value;\n    }\n\n    /**\n     * Here is the property dragImage you can use:\n     * - The string value as url to the image\n     *   <div class=\"panel panel-default\"\n     *        dnd-draggable [dragEnabled]=\"true\"\n     *        [dragImage]=\"/images/simpler.png\">\n     * ...\n     * - The DragImage value with Image and offset by x and y:\n     *   let myDragImage: DragImage = new DragImage(\"/images/simpler1.png\", 0, 0);\n     * ...\n     *   <div class=\"panel panel-default\"\n     *        dnd-draggable [dragEnabled]=\"true\"\n     *        [dragImage]=\"myDragImage\">\n     * ...\n     * - The custom function to return the value of dragImage programmatically:\n     *   <div class=\"panel panel-default\"\n     *        dnd-draggable [dragEnabled]=\"true\"\n     *        [dragImage]=\"getDragImage(someData)\">\n     * ...\n     *   getDragImage(value:any): string {\n     *     return value ? \"/images/simpler1.png\" : \"/images/simpler2.png\"\n     *   }\n     */\n    @Input() dragImage: string | DragImage | Function;\n\n    \n    @Input() cloneItem: boolean;\n\n    constructor(elemRef: ElementRef, dragDropService: DragDropService, config:DragDropConfig,\n        cdr:ChangeDetectorRef) {\n\n        super(elemRef, dragDropService, config, cdr);\n        this._defaultCursor = this._elem.style.cursor;\n        this.dragEnabled = true;\n    }\n\n    _onDragStartCallback(event: MouseEvent) {\n        this._dragDropService.isDragged = true;\n        this._dragDropService.dragData = this.dragData;\n        this._dragDropService.onDragSuccessCallback = this.onDragSuccessCallback;\n        this._elem.classList.add(this._config.onDragStartClass);\n        //\n        this.onDragStart.emit({dragData: this.dragData, mouseEvent: event});\n    }\n\n    _onDragEndCallback(event: MouseEvent) {\n        this._dragDropService.isDragged = false;\n        this._dragDropService.dragData = null;\n        this._dragDropService.onDragSuccessCallback = null;\n        this._elem.classList.remove(this._config.onDragStartClass);\n        //\n        this.onDragEnd.emit({dragData: this.dragData, mouseEvent: event});\n    }\n}\n\n\n@Directive({ selector: '[dnd-draggable-handle]' })\nexport class DraggableHandleComponent extends AbstractHandleComponent {\n    constructor(elemRef: ElementRef, dragDropService: DragDropService, config:DragDropConfig, _Component: DraggableComponent,\n        cdr:ChangeDetectorRef) {\n\n        super(elemRef, dragDropService, config, _Component, cdr);\n    }\n}\n",
    "// Copyright (C) 2016-2018 Sergey Akopkokhyants\n// This project is licensed under the terms of the MIT license.\n// https://github.com/akserg/ng2-dnd\n\nimport {isString} from './dnd.utils';\n\nexport class DataTransferEffect {\n\n    static COPY = new DataTransferEffect('copy');\n    static LINK = new DataTransferEffect('link');\n    static MOVE = new DataTransferEffect('move');\n    static NONE = new DataTransferEffect('none');\n\n    constructor(public name: string) { }\n}\n\nexport class DragImage {\n    constructor(\n        public imageElement: any,\n        public x_offset: number = 0,\n        public y_offset: number = 0) {\n            if (isString(this.imageElement)) {\n                // Create real image from string source\n                let imgScr: string = <string>this.imageElement;\n                this.imageElement = new HTMLImageElement();\n                (<HTMLImageElement>this.imageElement).src = imgScr;\n            }\n        }\n}\n\nexport class DragDropConfig {\n    public onDragStartClass: string = \"dnd-drag-start\";\n    public onDragEnterClass: string = \"dnd-drag-enter\";\n    public onDragOverClass: string = \"dnd-drag-over\";\n    public onSortableDragClass: string = \"dnd-sortable-drag\";\n\n    public dragEffect: DataTransferEffect = DataTransferEffect.MOVE;\n    public dropEffect: DataTransferEffect = DataTransferEffect.MOVE;\n    public dragCursor: string = \"move\";\n    public dragImage: DragImage;\n    public defaultCursor: string = \"pointer\";\n}",
    "// Copyright (C) 2016-2018 Sergey Akopkokhyants\n// This project is licensed under the terms of the MIT license.\n// https://github.com/akserg/ng2-dnd\n\nimport {Injectable, ChangeDetectorRef, ViewRef} from '@angular/core';\nimport {ElementRef} from '@angular/core';\n\nimport { DragDropConfig, DragImage } from './dnd.config';\nimport { DragDropService } from './dnd.service';\nimport { isString, isFunction, isPresent, createImage, callFun } from './dnd.utils';\n\n@Injectable()\nexport abstract class AbstractComponent {\n    _elem: HTMLElement;\n    _dragHandle: HTMLElement;\n    _dragHelper: HTMLElement;\n    _defaultCursor: string;\n\n    /**\n     * Last element that was mousedown'ed\n     */\n    _target: EventTarget;\n\n    /**\n     * Whether the object is draggable. Default is true.\n     */\n    private _dragEnabled: boolean = false;\n    set dragEnabled(enabled: boolean) {\n        this._dragEnabled = !!enabled;\n        this._elem.draggable = this._dragEnabled;\n    }\n    get dragEnabled(): boolean {\n        return this._dragEnabled;\n    }\n\n    /**\n     * Allows drop on this element\n     */\n    dropEnabled: boolean = false;\n    /**\n     * Drag effect\n     */\n    effectAllowed: string;\n    /**\n     * Drag cursor\n     */\n    effectCursor: string;\n\n    /**\n     * Restrict places where a draggable element can be dropped. Either one of\n     * these two mechanisms can be used:\n     *\n     * - dropZones: an array of strings that permits to specify the drop zones\n     *   associated with this component. By default, if the drop-zones attribute\n     *   is not specified, the droppable component accepts drop operations by\n     *   all the draggable components that do not specify the allowed-drop-zones\n     *\n     * - allowDrop: a boolean function for droppable components, that is checked\n     *   when an item is dragged. The function is passed the dragData of this\n     *   item.\n     *   - if it returns true, the item can be dropped in this component\n     *   - if it returns false, the item cannot be dropped here\n     */\n    allowDrop: (dropData: any) => boolean;\n    dropZones: string[] = [];\n\n    /**\n     * Here is the property dragImage you can use:\n     * - The string value as url to the image\n     *   <div class=\"panel panel-default\"\n     *        dnd-draggable [dragEnabled]=\"true\"\n     *        [dragImage]=\"/images/simpler.png\">\n     * ...\n     * - The DragImage value with Image and optional offset by x and y:\n     *   let myDragImage: DragImage = new DragImage(\"/images/simpler1.png\", 0, 0);\n     * ...\n     *   <div class=\"panel panel-default\"\n     *        dnd-draggable [dragEnabled]=\"true\"\n     *        [dragImage]=\"myDragImage\">\n     * ...\n     * - The custom function to return the value of dragImage programmatically:\n     *   <div class=\"panel panel-default\"\n     *        dnd-draggable [dragEnabled]=\"true\"\n     *        [dragImage]=\"getDragImage(someData)\">\n     * ...\n     *   getDragImage(value:any): string {\n     *     return value ? \"/images/simpler1.png\" : \"/images/simpler2.png\"\n     *   }\n     */\n    dragImage: string | DragImage | Function;\n\n    cloneItem: boolean = false;\n\n    constructor(elemRef: ElementRef, public _dragDropService: DragDropService, public _config: DragDropConfig,\n        private _cdr: ChangeDetectorRef) {\n\n        // Assign default cursor unless overridden\n        this._defaultCursor = _config.defaultCursor;\n        this._elem = elemRef.nativeElement;\n        this._elem.style.cursor = this._defaultCursor;  // set default cursor on our element\n        //\n        // DROP events\n        //\n        this._elem.ondragenter = (event: Event) => {\n            this._onDragEnter(event);\n        };\n        this._elem.ondragover = (event: DragEvent) => {\n            this._onDragOver(event);\n            //\n            if (event.dataTransfer != null) {\n                event.dataTransfer.dropEffect = this._config.dropEffect.name;\n            }\n\n            return false;\n        };\n        this._elem.ondragleave = (event: Event) => {\n            this._onDragLeave(event);\n        };\n        this._elem.ondrop = (event: Event) => {\n            this._onDrop(event);\n        };\n        //\n        // Drag events\n        //\n      this._elem.addEventListener('mousedown', (event: MouseEvent) => {\n        this._target = event.target;\n      }, false);\n\n        this._elem.addEventListener('dragstart', (event: DragEvent) => {\n            if (this._dragHandle) {\n                if (!this._dragHandle.contains(<Element>this._target)) {\n                    event.preventDefault();\n                    return;\n                }\n            }\n            if (this._dragDropService.firstDragData) { // process only first element in hierarhy\n              return ;\n            }\n            this._onDragStart(event);\n            this._dragDropService.firstDragData = this._dragDropService.dragData;\n            //\n            if (event.dataTransfer != null) {\n                event.dataTransfer.setData('text', '');\n                // Change drag effect\n                event.dataTransfer.effectAllowed = this.effectAllowed || this._config.dragEffect.name;\n                // Change drag image\n                if (isPresent(this.dragImage)) {\n                    if (isString(this.dragImage)) {\n                        (<any>event.dataTransfer).setDragImage(createImage(<string>this.dragImage));\n                    } else if (isFunction(this.dragImage)) {\n                        (<any>event.dataTransfer).setDragImage(callFun(<Function>this.dragImage));\n                    } else {\n                        let img: DragImage = <DragImage>this.dragImage;\n                        (<any>event.dataTransfer).setDragImage(img.imageElement, img.x_offset, img.y_offset);\n                    }\n                } else if (isPresent(this._config.dragImage)) {\n                    let dragImage: DragImage = this._config.dragImage;\n                    (<any>event.dataTransfer).setDragImage(dragImage.imageElement, dragImage.x_offset, dragImage.y_offset);\n                } else if (this.cloneItem) {\n                    this._dragHelper = <HTMLElement>this._elem.cloneNode(true);\n                    this._dragHelper.classList.add('dnd-drag-item');\n                    this._dragHelper.style.position = \"absolute\";\n                    this._dragHelper.style.top = \"0px\";\n                    this._dragHelper.style.left = \"-1000px\";\n                    this._elem.parentElement.appendChild(this._dragHelper);\n                    (<any>event.dataTransfer).setDragImage(this._dragHelper, event.offsetX, event.offsetY);\n                }\n\n                // Change drag cursor\n                let cursorelem = (this._dragHandle) ? this._dragHandle : this._elem;\n\n                if (this._dragEnabled) {\n                    cursorelem.style.cursor = this.effectCursor ? this.effectCursor : this._config.dragCursor;\n                } else {\n                    cursorelem.style.cursor = this._defaultCursor;\n                }\n            }\n        });\n\n        this._elem.addEventListener('dragend', (event: Event) => {\n            if (this._elem.parentElement && this._dragHelper) {\n                this._elem.parentElement.removeChild(this._dragHelper);\n            }\n            this._onDragEnd(event);\n            // Restore style of dragged element\n            let cursorelem = (this._dragHandle) ? this._dragHandle : this._elem;\n            cursorelem.style.cursor = this._defaultCursor;\n            this._dragDropService.firstDragData = null;\n        });\n    }\n\n    public setDragHandle(elem: HTMLElement) {\n        this._dragHandle = elem;\n    }\n    /******* Change detection ******/\n\n    detectChanges () {\n        // Programmatically run change detection to fix issue in Safari\n        setTimeout(() => {\n            if ( this._cdr && !(this._cdr as ViewRef).destroyed ) {\n                this._cdr.detectChanges();\n            }\n        }, 250);\n    }\n\n    //****** Droppable *******//\n    private _onDragEnter(event: Event): void {\n        // console.log('ondragenter._isDropAllowed', this._isDropAllowed);\n        if (this._isDropAllowed(event)) {\n            // event.preventDefault();\n            this._onDragEnterCallback(event);\n        }\n    }\n\n    private _onDragOver(event: Event) {\n        // // console.log('ondragover._isDropAllowed', this._isDropAllowed);\n        if (this._isDropAllowed(event)) {\n            // The element is over the same source element - do nothing\n            if (event.preventDefault) {\n                // Necessary. Allows us to drop.\n                event.preventDefault();\n            }\n\n            this._onDragOverCallback(event);\n        }\n    }\n\n    private _onDragLeave(event: Event): void {\n        // console.log('ondragleave._isDropAllowed', this._isDropAllowed);\n        if (this._isDropAllowed(event)) {\n            // event.preventDefault();\n            this._onDragLeaveCallback(event);\n        }\n    }\n\n    private _onDrop(event: Event): void {\n        // console.log('ondrop._isDropAllowed', this._isDropAllowed);\n        if (this._isDropAllowed(event)) {\n            // Necessary. Allows us to drop.\n            this._preventAndStop(event);\n\n            this._onDropCallback(event);\n\n            this.detectChanges();\n        }\n    }\n\n    private _isDropAllowed(event: any): boolean {\n        if ((this._dragDropService.isDragged || (event.dataTransfer && event.dataTransfer.files)) && this.dropEnabled) {\n            // First, if `allowDrop` is set, call it to determine whether the\n            // dragged element can be dropped here.\n            if (this.allowDrop) {\n                return this.allowDrop(this._dragDropService.dragData);\n            }\n\n            // Otherwise, use dropZones if they are set.\n            if (this.dropZones.length === 0 && this._dragDropService.allowedDropZones.length === 0) {\n                return true;\n            }\n            for (let i: number = 0; i < this._dragDropService.allowedDropZones.length; i++) {\n                let dragZone: string = this._dragDropService.allowedDropZones[i];\n                if (this.dropZones.indexOf(dragZone) !== -1) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    private _preventAndStop(event: Event): any {\n        if (event.preventDefault) {\n            event.preventDefault();\n        }\n        if (event.stopPropagation) {\n            event.stopPropagation();\n        }\n    }\n\n    //*********** Draggable **********//\n\n    private _onDragStart(event: Event): void {\n        //console.log('ondragstart.dragEnabled', this._dragEnabled);\n        if (this._dragEnabled) {\n            this._dragDropService.allowedDropZones = this.dropZones;\n            // console.log('ondragstart.allowedDropZones', this._dragDropService.allowedDropZones);\n            this._onDragStartCallback(event);\n            if (event.stopPropagation) {\n                event.stopPropagation();\n            }\n        }\n    }\n\n    private _onDragEnd(event: Event): void {\n        this._dragDropService.allowedDropZones = [];\n        // console.log('ondragend.allowedDropZones', this._dragDropService.allowedDropZones);\n        this._onDragEndCallback(event);\n    }\n\n    //**** Drop Callbacks ****//\n    _onDragEnterCallback(event: Event) { }\n    _onDragOverCallback(event: Event) { }\n    _onDragLeaveCallback(event: Event) { }\n    _onDropCallback(event: Event) { }\n\n    //**** Drag Callbacks ****//\n    _onDragStartCallback(event: Event) { }\n    _onDragEndCallback(event: Event) { }\n}\n\nexport class AbstractHandleComponent {\n    _elem: HTMLElement;\n    constructor(elemRef: ElementRef, public _dragDropService: DragDropService, public _config: DragDropConfig,\n        private _Component: AbstractComponent, private _cdr: ChangeDetectorRef) {\n        this._elem = elemRef.nativeElement;\n        this._Component.setDragHandle(this._elem);\n    }\n}\n",
    "// Copyright (C) 2016-2018 Sergey Akopkokhyants\n// This project is licensed under the terms of the MIT license.\n// https://github.com/akserg/ng2-dnd\n\nimport {ChangeDetectorRef} from '@angular/core';\nimport {Directive, Input, Output, EventEmitter, ElementRef} from '@angular/core';\nimport {FormArray} from '@angular/forms';\n\nimport {AbstractComponent, AbstractHandleComponent} from './abstract.component';\nimport {DragDropConfig} from './dnd.config';\nimport {DragDropService, DragDropSortableService} from './dnd.service';\n\n@Directive({ selector: '[dnd-sortable-container]' })\nexport class SortableContainer extends AbstractComponent {\n\n    @Input(\"dragEnabled\") set draggable(value:boolean) {\n        this.dragEnabled = !!value;\n    }\n\n    private _sortableData: Array<any>|FormArray = [];\n    private sortableHandler: SortableFormArrayHandler|SortableArrayHandler;\n\n    @Input() set sortableData(sortableData: Array<any>|FormArray) {\n        this._sortableData = sortableData;\n        if (sortableData instanceof FormArray) {\n            this.sortableHandler = new SortableFormArrayHandler();\n        } else {\n            this.sortableHandler = new SortableArrayHandler();\n        }\n        //\n        this.dropEnabled = !!this._sortableData;\n        // console.log(\"collection is changed, drop enabled: \" + this.dropEnabled);\n    }\n    get sortableData(): Array<any>|FormArray {\n        return this._sortableData;\n    }\n\n    @Input(\"dropZones\") set dropzones(value:Array<string>) {\n        this.dropZones = value;\n    }\n\n    constructor(elemRef: ElementRef, dragDropService: DragDropService, config:DragDropConfig, cdr:ChangeDetectorRef,\n        private _sortableDataService: DragDropSortableService) {\n\n        super(elemRef, dragDropService, config, cdr);\n        this.dragEnabled = false;\n    }\n\n    _onDragEnterCallback(event: Event) {\n        if (this._sortableDataService.isDragged) {\n            let item:any = this._sortableDataService.sortableContainer.getItemAt(this._sortableDataService.index);\n            // Check does element exist in sortableData of this Container\n            if (this.indexOf(item) === -1) {\n                // Let's add it\n                // console.log('Container._onDragEnterCallback. drag node [' + this._sortableDataService.index.toString() + '] over parent node');\n                // Remove item from previouse list\n                this._sortableDataService.sortableContainer.removeItemAt(this._sortableDataService.index);\n                if (this._sortableDataService.sortableContainer._sortableData.length === 0) {\n                    this._sortableDataService.sortableContainer.dropEnabled = true;\n                }\n                // Add item to new list\n                this.insertItemAt(item, 0);\n                this._sortableDataService.sortableContainer = this;\n                this._sortableDataService.index = 0;\n            }\n            // Refresh changes in properties of container component\n            this.detectChanges();\n        }\n    }\n\n    getItemAt(index: number): any {\n        return this.sortableHandler.getItemAt(this._sortableData, index);\n    }\n\n    indexOf(item: any): number {\n        return this.sortableHandler.indexOf(this._sortableData, item);\n    }\n\n    removeItemAt(index: number): void {\n        this.sortableHandler.removeItemAt(this._sortableData, index);\n    }\n\n    insertItemAt(item: any, index: number) {\n        this.sortableHandler.insertItemAt(this._sortableData, item, index);\n    }\n}\n\nclass SortableArrayHandler {\n    getItemAt(sortableData: any, index: number): any {\n        return sortableData[index];\n    }\n\n    indexOf(sortableData: any, item: any): number {\n        return sortableData.indexOf(item);\n    }\n\n    removeItemAt(sortableData: any, index: number) {\n        sortableData.splice(index, 1);\n    }\n\n    insertItemAt(sortableData: any, item: any, index: number) {\n        sortableData.splice(index, 0, item);\n    }\n}\n\nclass SortableFormArrayHandler {\n    getItemAt(sortableData: any, index: number): any {\n        return sortableData.at(index);\n    }\n\n    indexOf(sortableData: any, item: any): number {\n        return sortableData.controls.indexOf(item);\n    }\n\n    removeItemAt(sortableData: any, index: number) {\n        sortableData.removeAt(index);\n    }\n\n    insertItemAt(sortableData: any, item: any, index: number) {\n        sortableData.insert(index, item);\n    }\n}\n\n@Directive({ selector: '[dnd-sortable]' })\nexport class SortableComponent extends AbstractComponent {\n\n    @Input('sortableIndex') index: number;\n\n    @Input(\"dragEnabled\") set draggable(value:boolean) {\n        this.dragEnabled = !!value;\n    }\n\n    @Input(\"dropEnabled\") set droppable(value:boolean) {\n        this.dropEnabled = !!value;\n    }\n\n    /**\n     * The data that has to be dragged. It can be any JS object\n     */\n    @Input() dragData: any;\n\n    /**\n     * Drag allowed effect\n     */\n    @Input(\"effectAllowed\") set effectallowed(value: string) {\n        this.effectAllowed = value;\n    }\n\n    /**\n     * Drag effect cursor\n     */\n    @Input(\"effectCursor\") set effectcursor(value: string) {\n        this.effectCursor = value;\n    }\n\n    /**\n     * Callback function called when the drag action ends with a valid drop action.\n     * It is activated after the on-drop-success callback\n     */\n    @Output(\"onDragSuccess\") onDragSuccessCallback: EventEmitter<any> = new EventEmitter<any>();\n\n    @Output(\"onDragStart\") onDragStartCallback: EventEmitter<any> = new EventEmitter<any>();\n    @Output(\"onDragOver\") onDragOverCallback: EventEmitter<any> = new EventEmitter<any>();\n    @Output(\"onDragEnd\") onDragEndCallback: EventEmitter<any> = new EventEmitter<any>();\n    @Output(\"onDropSuccess\") onDropSuccessCallback: EventEmitter<any> = new EventEmitter<any>();\n\n    constructor(elemRef: ElementRef, dragDropService: DragDropService, config:DragDropConfig,\n        private _sortableContainer: SortableContainer,\n        private _sortableDataService: DragDropSortableService,\n        cdr:ChangeDetectorRef) {\n        super(elemRef, dragDropService, config, cdr);\n        this.dropZones = this._sortableContainer.dropZones;\n        this.dragEnabled = true;\n        this.dropEnabled = true;\n    }\n\n    _onDragStartCallback(event: Event) {\n        // console.log('_onDragStartCallback. dragging elem with index ' + this.index);\n        this._sortableDataService.isDragged = true;\n        this._sortableDataService.sortableContainer = this._sortableContainer;\n        this._sortableDataService.index = this.index;\n        this._sortableDataService.markSortable(this._elem);\n        // Add dragData\n        this._dragDropService.isDragged = true;\n        this._dragDropService.dragData = this.dragData;\n        this._dragDropService.onDragSuccessCallback = this.onDragSuccessCallback;\n        //\n        this.onDragStartCallback.emit(this._dragDropService.dragData);\n    }\n\n    _onDragOverCallback(event: Event) {\n        if (this._sortableDataService.isDragged && this._elem !== this._sortableDataService.elem) {\n            // console.log('_onDragOverCallback. dragging elem with index ' + this.index);\n            this._sortableDataService.sortableContainer = this._sortableContainer;\n            this._sortableDataService.index = this.index;\n            this._sortableDataService.markSortable(this._elem);\n            this.onDragOverCallback.emit(this._dragDropService.dragData);\n        }\n    }\n\n    _onDragEndCallback(event: Event) {\n        // console.log('_onDragEndCallback. end dragging elem with index ' + this.index);\n        this._sortableDataService.isDragged = false;\n        this._sortableDataService.sortableContainer = null;\n        this._sortableDataService.index = null;\n        this._sortableDataService.markSortable(null);\n        // Add dragGata\n        this._dragDropService.isDragged = false;\n        this._dragDropService.dragData = null;\n        this._dragDropService.onDragSuccessCallback = null;\n        //\n        this.onDragEndCallback.emit(this._dragDropService.dragData);\n    }\n\n    _onDragEnterCallback(event: Event) {\n        if (this._sortableDataService.isDragged) {\n            this._sortableDataService.markSortable(this._elem);\n            if ((this.index !== this._sortableDataService.index) ||\n                (this._sortableDataService.sortableContainer.sortableData !== this._sortableContainer.sortableData)) {\n                // console.log('Component._onDragEnterCallback. drag node [' + this.index + '] over node [' + this._sortableDataService.index + ']');\n                // Get item\n                let item:any = this._sortableDataService.sortableContainer.getItemAt(this._sortableDataService.index);\n                // Remove item from previouse list\n                this._sortableDataService.sortableContainer.removeItemAt(this._sortableDataService.index);\n                if (this._sortableDataService.sortableContainer.sortableData.length === 0) {\n                    this._sortableDataService.sortableContainer.dropEnabled = true;\n                }\n                // Add item to new list\n                this._sortableContainer.insertItemAt(item, this.index);\n                if (this._sortableContainer.dropEnabled) {\n                    this._sortableContainer.dropEnabled = false;\n                }\n                this._sortableDataService.sortableContainer = this._sortableContainer;\n                this._sortableDataService.index = this.index;\n                this.detectChanges();\n            }\n        }\n    }\n\n    _onDropCallback (event: Event) {\n        if (this._sortableDataService.isDragged) {\n            // console.log('onDropCallback.onDropSuccessCallback.dragData', this._dragDropService.dragData);\n            this.onDropSuccessCallback.emit(this._dragDropService.dragData);\n            if (this._dragDropService.onDragSuccessCallback) {\n                // console.log('onDropCallback.onDragSuccessCallback.dragData', this._dragDropService.dragData);\n                this._dragDropService.onDragSuccessCallback.emit(this._dragDropService.dragData);\n            }\n            // Refresh changes in properties of container component\n            this._sortableContainer.detectChanges();\n        }\n    }\n}\n\n@Directive({ selector: '[dnd-sortable-handle]' })\nexport class SortableHandleComponent extends AbstractHandleComponent {\n    constructor(elemRef: ElementRef, dragDropService: DragDropService, config:DragDropConfig, _Component: SortableComponent,\n        cdr:ChangeDetectorRef) {\n\n        super(elemRef, dragDropService, config, _Component, cdr);\n    }\n}\n",
    "// Copyright (C) 2016-2018 Sergey Akopkokhyants\n// This project is licensed under the terms of the MIT license.\n// https://github.com/akserg/ng2-dnd\n\nimport {Injectable, EventEmitter} from '@angular/core';\n\nimport {DragDropConfig} from './dnd.config';\nimport {isPresent} from './dnd.utils';\nimport {SortableContainer} from './sortable.component';\n\nexport class DragDropData {\n    dragData: any;\n    mouseEvent: MouseEvent;\n}\n\nexport function dragDropServiceFactory(): DragDropService  {\n    return new DragDropService();\n}\n\n@Injectable()\nexport class DragDropService {\n    allowedDropZones: Array<string> = [];\n    onDragSuccessCallback: EventEmitter<DragDropData>;\n    dragData: any;\n    firstDragData: any;\n    isDragged: boolean;\n}\n\nexport function dragDropSortableServiceFactory(config: DragDropConfig): DragDropSortableService  {\n    return new DragDropSortableService(config);\n}\n\n@Injectable()\nexport class DragDropSortableService {\n    index: number;\n    sortableContainer: SortableContainer;\n    isDragged: boolean;\n\n    private _elem: HTMLElement;\n    public get elem(): HTMLElement {\n        return this._elem;\n    }\n\n    constructor(private _config:DragDropConfig) {}\n\n    markSortable(elem: HTMLElement) {\n        if (isPresent(this._elem)) {\n            this._elem.classList.remove(this._config.onSortableDragClass);\n        }\n        if (isPresent(elem)) {\n            this._elem = elem;\n            this._elem.classList.add(this._config.onSortableDragClass);\n        }\n    }\n}\n",
    "// Copyright (C) 2016-2018 Sergey Akopkokhyants\n// This project is licensed under the terms of the MIT license.\n// https://github.com/akserg/ng2-dnd\n\nimport {ChangeDetectorRef} from '@angular/core';\nimport {Directive, Input, Output, EventEmitter, ElementRef} from '@angular/core';\n\nimport {AbstractComponent} from './abstract.component';\nimport {DragDropConfig} from './dnd.config';\nimport {DragDropService, DragDropData} from './dnd.service';\n\n@Directive({ selector: '[dnd-droppable]' })\nexport class DroppableComponent extends AbstractComponent {\n\n    @Input(\"dropEnabled\") set droppable(value:boolean) {\n        this.dropEnabled = !!value;\n    }\n\n    /**\n     * Callback function called when the drop action completes correctly.\n     * It is activated before the on-drag-success callback.\n     */\n    @Output() onDropSuccess: EventEmitter<DragDropData> = new EventEmitter<DragDropData>();\n    @Output() onDragEnter: EventEmitter<DragDropData> = new EventEmitter<DragDropData>();\n    @Output() onDragOver: EventEmitter<DragDropData> = new EventEmitter<DragDropData>();\n    @Output() onDragLeave: EventEmitter<DragDropData> = new EventEmitter<DragDropData>();\n\n    @Input(\"allowDrop\") set allowdrop(value: (dropData: any) => boolean) {\n        this.allowDrop = value;\n    }\n\n    @Input(\"dropZones\") set dropzones(value:Array<string>) {\n        this.dropZones = value;\n    }\n\n    /**\n     * Drag allowed effect\n     */\n    @Input(\"effectAllowed\") set effectallowed(value: string) {\n        this.effectAllowed = value;\n    }\n\n    /**\n     * Drag effect cursor\n     */\n    @Input(\"effectCursor\") set effectcursor(value: string) {\n        this.effectCursor = value;\n    }\n\n    constructor(elemRef: ElementRef, dragDropService: DragDropService, config:DragDropConfig,\n        cdr:ChangeDetectorRef) {\n\n        super(elemRef, dragDropService, config, cdr);\n\n        this.dropEnabled = true;\n    }\n\n    _onDragEnterCallback(event: MouseEvent) {\n        if (this._dragDropService.isDragged) {\n            this._elem.classList.add(this._config.onDragEnterClass);\n            this.onDragEnter.emit({dragData: this._dragDropService.dragData, mouseEvent: event});\n        }\n    }\n\n    _onDragOverCallback (event: MouseEvent) {\n        if (this._dragDropService.isDragged) {\n            this._elem.classList.add(this._config.onDragOverClass);\n            this.onDragOver.emit({dragData: this._dragDropService.dragData, mouseEvent: event});\n        }\n    };\n\n    _onDragLeaveCallback (event: MouseEvent) {\n        if (this._dragDropService.isDragged) {\n            this._elem.classList.remove(this._config.onDragOverClass);\n            this._elem.classList.remove(this._config.onDragEnterClass);\n            this.onDragLeave.emit({dragData: this._dragDropService.dragData, mouseEvent: event});\n        }\n    };\n\n    _onDropCallback (event: MouseEvent) {\n        let dataTransfer = (event as any).dataTransfer;\n        if (this._dragDropService.isDragged || (dataTransfer && dataTransfer.files)) {\n            this.onDropSuccess.emit({dragData: this._dragDropService.dragData, mouseEvent: event});\n            if (this._dragDropService.onDragSuccessCallback) {\n                this._dragDropService.onDragSuccessCallback.emit({dragData: this._dragDropService.dragData, mouseEvent: event});\n            }\n            this._elem.classList.remove(this._config.onDragOverClass);\n            this._elem.classList.remove(this._config.onDragEnterClass);\n        }\n    }\n}\n",
    "// Copyright (C) 2016-2018 Sergey Akopkokhyants\n// This project is licensed under the terms of the MIT license.\n// https://github.com/akserg/ng2-dnd\n\nimport { NgModule, ModuleWithProviders } from \"@angular/core\";\n\nimport {DragDropConfig} from './dnd.config';\nimport {DragDropService, DragDropSortableService, dragDropServiceFactory, dragDropSortableServiceFactory} from './dnd.service';\nimport {DraggableComponent, DraggableHandleComponent} from './draggable.component';\nimport {DroppableComponent} from './droppable.component';\nimport {SortableContainer, SortableComponent, SortableHandleComponent} from './sortable.component';\n\nexport * from './abstract.component';\nexport * from './dnd.config';\nexport * from './dnd.service';\nexport * from './draggable.component';\nexport * from './droppable.component';\nexport * from './sortable.component';\n\nexport let providers = [\n    DragDropConfig,\n    { provide: DragDropService, useFactory: dragDropServiceFactory },\n    { provide: DragDropSortableService, useFactory: dragDropSortableServiceFactory, deps: [DragDropConfig] }\n];\n\n@NgModule({\n  declarations: [DraggableComponent, DraggableHandleComponent, DroppableComponent, SortableContainer, SortableComponent, SortableHandleComponent],\n  exports : [DraggableComponent, DraggableHandleComponent, DroppableComponent, SortableContainer, SortableComponent, SortableHandleComponent],\n\n})\nexport class DndModule {\n  static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: DndModule,\n            providers: providers\n        };\n    }\n}\n"
  ],
  "names": [
    "isString",
    "obj",
    "isPresent",
    "undefined",
    "dragDropSortableServiceFactory",
    "config",
    "DragDropSortableService",
    "DataTransferEffect",
    "name",
    "LINK",
    "MOVE",
    "NONE",
    "DragImage",
    "imageElement",
    "x_offset",
    "y_offset",
    "this",
    "imgScr",
    "HTMLImageElement",
    "src",
    "dragCursor",
    "AbstractComponent",
    "elemRef",
    "_dragDropService",
    "_config",
    "_cdr",
    "_this",
    "dropEnabled",
    "dropZones",
    "_defaultCursor",
    "defaultCursor",
    "_elem",
    "nativeElement",
    "style",
    "cursor",
    "ondragenter",
    "event",
    "_onDragEnter",
    "ondragover",
    "dataTransfer",
    "dropEffect",
    "ondragleave",
    "_onDragLeave",
    "ondrop",
    "_onDrop",
    "addEventListener",
    "_target",
    "target",
    "_dragHandle",
    "contains",
    "firstDragData",
    "_onDragStart",
    "dragData",
    "setData",
    "effectAllowed",
    "dragEffect",
    "dragImage",
    "setDragImage",
    "img",
    "createImage",
    "isFunction",
    "callFun",
    "cloneItem",
    "_dragHelper",
    "cloneNode",
    "classList",
    "add",
    "position",
    "top",
    "left",
    "parentElement",
    "appendChild",
    "offsetX",
    "offsetY",
    "cursorelem",
    "effectCursor",
    "removeChild",
    "_onDragEnd",
    "Object",
    "defineProperty",
    "prototype",
    "_dragEnabled",
    "enabled",
    "enumerable",
    "configurable",
    "detectChanges",
    "_isDropAllowed",
    "_onDragOverCallback",
    "_preventAndStop",
    "_onDropCallback",
    "length",
    "allowedDropZones",
    "i",
    "dragZone",
    "preventDefault",
    "stopPropagation",
    "_onDragLeaveCallback",
    "decorators",
    "type",
    "Injectable",
    "ctorParameters",
    "ElementRef",
    "DragDropService",
    "DragDropConfig",
    "_Component",
    "setDragHandle",
    "SortableContainer",
    "_super",
    "dragDropService",
    "cdr",
    "_sortableDataService",
    "call",
    "_sortableData",
    "dragEnabled",
    "set",
    "value",
    "sortableData",
    "sortableHandler",
    "SortableArrayHandler",
    "_onDragEnterCallback",
    "isDragged",
    "sortableContainer",
    "removeItemAt",
    "index",
    "getItemAt",
    "indexOf",
    "item",
    "insertItemAt",
    "Input",
    "dropzones",
    "args",
    "splice",
    "SortableFormArrayHandler",
    "at",
    "controls",
    "onDragOverCallback",
    "EventEmitter",
    "onDropSuccessCallback",
    "_sortableContainer",
    "SortableComponent",
    "_onDragStartCallback",
    "markSortable",
    "onDragSuccessCallback",
    "onDragStartCallback",
    "emit",
    "elem",
    "Output",
    "onDragEndCallback",
    "__extends",
    "SortableHandleComponent",
    "Directive",
    "selector",
    "get",
    "onSortableDragClass",
    "DraggableComponent",
    "onDragEnd",
    "onDragStartClass",
    "onDragStart",
    "mouseEvent",
    "_onDragEndCallback",
    "draggable",
    "DraggableHandleComponent",
    "DroppableComponent",
    "onDropSuccess",
    "onDragEnter"
  ],
  "mappings": "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"
}
